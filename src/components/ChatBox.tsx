import React, { useState, useRef, useEffect } from 'react';
import '../styles/ChatBoxStyles/_chatbox.scss';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
  isTyping?: boolean;
}

interface ChatBoxProps {
  isOpen?: boolean;
  onToggle?: () => void;
}

const ChatBox: React.FC<ChatBoxProps> = ({ isOpen = false, onToggle }) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Xin ch√†o! T√¥i l√† E-Drive Assistant. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ xe ƒëi·ªán, ƒë·∫∑t l·ªãch l√°i th·ª≠, ho·∫∑c gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
      sender: 'ai',
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(!isOpen);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (!isMinimized && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isMinimized]);

  const generateAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();
    
    // Xe ƒëi·ªán v√† s·∫£n ph·∫©m
    if (lowerMessage.includes('xe ƒëi·ªán') || lowerMessage.includes('√¥ t√¥ ƒëi·ªán')) {
      return 'E-Drive c√≥ ƒëa d·∫°ng d√≤ng xe ƒëi·ªán t·ª´ sedan, SUV ƒë·∫øn hatchback. T·∫•t c·∫£ ƒë·ªÅu ƒë∆∞·ª£c trang b·ªã c√¥ng ngh·ªá pin ti√™n ti·∫øn, h·ªá th·ªëng s·∫°c nhanh v√† c√≥ th·ªÉ di chuy·ªÉn 300-500km m·ªôt l·∫ßn s·∫°c. B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ d√≤ng xe n√†o?';
    }
    
    // Gi√° c·∫£
    if (lowerMessage.includes('gi√°') || lowerMessage.includes('bao nhi√™u ti·ªÅn')) {
      return 'Gi√° xe ƒëi·ªán E-Drive dao ƒë·ªông t·ª´ 800 tri·ªáu ƒë·∫øn 2.5 t·ª∑ VNƒê t√πy theo d√≤ng xe. Ch√∫ng t√¥i c√≥ nhi·ªÅu g√≥i t√†i ch√≠nh h·ªó tr·ª£ 0% l√£i su·∫•t. B·∫°n c√≥ mu·ªën t√¥i t∆∞ v·∫•n chi ti·∫øt v·ªÅ g√≥i t√†i ch√≠nh kh√¥ng?';
    }
    
    // ƒê·∫∑t l·ªãch l√°i th·ª≠
    if (lowerMessage.includes('l√°i th·ª≠') || lowerMessage.includes('test drive')) {
      return 'Tuy·ªát v·ªùi! B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch l√°i th·ª≠ mi·ªÖn ph√≠ t·∫°i showroom. Ch·ªâ c·∫ßn click v√†o n√∫t "ƒê·∫∑t l·ªãch l√°i th·ª≠" tr√™n trang web ho·∫∑c t√¥i c√≥ th·ªÉ h∆∞·ªõng d·∫´n b·∫°n ƒë·∫∑t l·ªãch ngay b√¢y gi·ªù. B·∫°n mu·ªën l√°i th·ª≠ xe n√†o?';
    }
    
    // Pin v√† s·∫°c
    if (lowerMessage.includes('pin') || lowerMessage.includes('s·∫°c') || lowerMessage.includes('charging')) {
      return 'Pin xe ƒëi·ªán E-Drive c√≥ tu·ªïi th·ªç 8-10 nƒÉm v·ªõi b·∫£o h√†nh 8 nƒÉm. Th·ªùi gian s·∫°c nhanh t·ª´ 30-80% ch·ªâ 30 ph√∫t. Ch√∫ng t√¥i c√≥ m·∫°ng l∆∞·ªõi tr·∫°m s·∫°c r·ªông kh·∫Øp v√† h·ªó tr·ª£ l·∫Øp ƒë·∫∑t s·∫°c t·∫°i nh√†. B·∫°n c·∫ßn bi·∫øt th√™m g√¨ v·ªÅ h·ªá th·ªëng s·∫°c?';
    }
    
    // B·∫£o h√†nh
    if (lowerMessage.includes('b·∫£o h√†nh') || lowerMessage.includes('warranty')) {
      return 'E-Drive cung c·∫•p b·∫£o h√†nh to√†n di·ªán: 3 nƒÉm ho·∫∑c 100,000km cho xe, 8 nƒÉm cho pin, v√† b·∫£o d∆∞·ª°ng mi·ªÖn ph√≠ 2 nƒÉm ƒë·∫ßu. Ch√∫ng t√¥i c√≥ 50+ trung t√¢m b·∫£o d∆∞·ª°ng to√†n qu·ªëc.';
    }
    
    // ƒê·ªãa ch·ªâ showroom
    if (lowerMessage.includes('showroom') || lowerMessage.includes('ƒë·ªãa ch·ªâ') || lowerMessage.includes('·ªü ƒë√¢u')) {
      return 'E-Drive c√≥ showroom t·∫°i H√† N·ªôi, TP.HCM, ƒê√† N·∫µng v√† c√°c t·ªânh l·ªõn. Showroom ch√≠nh t·∫°i TP.HCM: 123 ƒê∆∞·ªùng Xe ƒêi·ªán, Qu·∫≠n 1. B·∫°n mu·ªën bi·∫øt ƒë·ªãa ch·ªâ showroom g·∫ßn nh·∫•t kh√¥ng?';
    }
    
    // Li√™n h·ªá
    if (lowerMessage.includes('li√™n h·ªá') || lowerMessage.includes('hotline') || lowerMessage.includes('g·ªçi')) {
      return 'B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua:\nüìû Hotline: 1900-EDRIVE\nüìß Email: support@e-drive.vn\nüïí Gi·ªù l√†m vi·ªác: 8:00-18:00 (T2-T7)\nHo·∫∑c ƒë·ªÉ l·∫°i th√¥ng tin, ch√∫ng t√¥i s·∫Ω g·ªçi l·∫°i trong 24h.';
    }
    
    // Ch√†o h·ªèi
    if (lowerMessage.includes('xin ch√†o') || lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
      return 'Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ xe ƒëi·ªán, gi√° c·∫£, ƒë·∫∑t l·ªãch l√°i th·ª≠, ho·∫∑c gi·∫£i ƒë√°p th·∫Øc m·∫Øc. B·∫°n quan t√¢m ƒë·∫øn v·∫•n ƒë·ªÅ g√¨?';
    }
    
    // C·∫£m ∆°n
    if (lowerMessage.includes('c·∫£m ∆°n') || lowerMessage.includes('thanks') || lowerMessage.includes('thank you')) {
      return 'Kh√¥ng c√≥ g√¨! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n. N·∫øu c√≥ th√™m th·∫Øc m·∫Øc g√¨ v·ªÅ xe ƒëi·ªán E-Drive, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi nh√©. Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! üòä';
    }
    
    // M·∫∑c ƒë·ªãnh
    return 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ:\n\nüöó Th√¥ng tin xe ƒëi·ªán v√† c√°c d√≤ng s·∫£n ph·∫©m\nüí∞ Gi√° c·∫£ v√† g√≥i t√†i ch√≠nh\nüîã H·ªá th·ªëng pin v√† s·∫°c\nüõ†Ô∏è B·∫£o h√†nh v√† b·∫£o d∆∞·ª°ng\nüìç ƒê·ªãa ch·ªâ showroom\nüìû ƒê·∫∑t l·ªãch l√°i th·ª≠\n\nB·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ v·∫•n ƒë·ªÅ n√†o?';
  };

  const handleSendMessage = async () => {
    if (!inputText.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText.trim(),
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    // Simulate AI thinking time
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: generateAIResponse(inputText),
        sender: 'ai',
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const toggleChatBox = () => {
    setIsMinimized(!isMinimized);
    if (onToggle) onToggle();
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('vi-VN', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const quickQuestions = [
    'Gi√° xe ƒëi·ªán bao nhi√™u?',
    'ƒê·∫∑t l·ªãch l√°i th·ª≠',
    'Th√¥ng tin v·ªÅ pin',
    'ƒê·ªãa ch·ªâ showroom'
  ];

  const handleQuickQuestion = (question: string) => {
    setInputText(question);
    setTimeout(() => handleSendMessage(), 100);
  };

  return (
    <>
      {/* Floating Chat Button */}
      <div 
        className={`chat-float-button ${isMinimized ? '' : 'hidden'}`}
        onClick={toggleChatBox}
      >
        <i className="fas fa-message"></i>
        <span className="notification-dot"></span>
      </div>

      {/* Chat Box */}
      <div className={`chatbox-container ${isMinimized ? 'minimized' : 'open'}`}>
        {/* Header */}
        <div className="chatbox-header">
          <div className="header-info">
                        <div className="ai-avatar">              <i className="fas fa-wand-magic-sparkles"></i>            </div>
            <div className="header-text">
              <h4>E-Drive Assistant</h4>
                            <div className="online-status">                <i className="fas fa-circle-dot"></i>                Tr·ª±c tuy·∫øn              </div>
            </div>
          </div>
          <div className="header-actions">
            <button 
              className="minimize-btn"
              onClick={toggleChatBox}
              aria-label="Thu nh·ªè chat"
            >
              <i className="fas fa-xmark"></i>
            </button>
          </div>
        </div>

        {/* Messages */}
        <div className="chatbox-messages">
          {messages.length === 1 && (
            <div className="quick-questions">
              <p>C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p:</p>
              <div className="quick-buttons">
                {quickQuestions.map((question, index) => (
                  <button
                    key={index}
                    className="quick-btn"
                    onClick={() => handleQuickQuestion(question)}
                  >
                    {question}
                  </button>
                ))}
              </div>
            </div>
          )}
          
          {messages.map((message) => (
            <div
              key={message.id}
              className={`message ${message.sender === 'user' ? 'user-message' : 'ai-message'}`}
            >
              {message.sender === 'ai' && (
                <div className="message-avatar">
                  <i className="fas fa-wand-magic-sparkles"></i>
                </div>
              )}
              <div className="message-content">
                <div className="message-text">
                  {message.text.split('\n').map((line, index) => (
                    <React.Fragment key={index}>
                      {line}
                      {index < message.text.split('\n').length - 1 && <br />}
                    </React.Fragment>
                  ))}
                </div>
                <div className="message-time">
                  {formatTime(message.timestamp)}
                </div>
              </div>
            </div>
          ))}

          {isTyping && (
            <div className="message ai-message typing-message">
              <div className="message-avatar">
                <i className="fas fa-wand-magic-sparkles"></i>
              </div>
              <div className="message-content">
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* Input */}
        <div className="chatbox-input">
          <div className="input-container">
            <input
              ref={inputRef}
              type="text"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
              disabled={isTyping}
            />
            <button
              className="send-btn"
              onClick={handleSendMessage}
              disabled={!inputText.trim() || isTyping}
              aria-label="G·ª≠i tin nh·∫Øn"
            >
              <i className="fas fa-arrow-up"></i>
            </button>
          </div>
          <div className="input-footer">
            <span>Powered by E-Drive AI</span>
          </div>
        </div>
      </div>
    </>
  );
};

export default ChatBox;