import { useState, useCallback, useMemo, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { SuccessModal } from "../components/SuccessModal";
import { fetchVehiclesFromApi } from "../services/vehicleApi";
import { createTestDrive, TestDriveApiError } from "../services/testDriveApi";
import { createCustomer } from "../services/customersApi";
import { getProfile } from "../services/profileApi";
import type { VehicleApiResponse } from "../types/product";
import Footer from "../components/Footer";
import styles from "../styles/TestDriveStyles/TestDrivePage.module.scss";

interface BookingFormData {
  name: string;
  phone: string;
  email: string;
  citizenId: string;
  model: string;
  variant: string;
  date: string;
  time: string;
  note: string;
  confirmInfo: boolean;
}

interface ValidationErrors {
  name?: string;
  phone?: string;
  email?: string;
  citizenId?: string;
  model?: string;
  variant?: string;
  date?: string;
  time?: string;
  confirmInfo?: string;
}

const TestDrivePage: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);
  
  // Vehicle data from API
  const [vehicles, setVehicles] = useState<VehicleApiResponse[]>([]);
  const [loadingVehicles, setLoadingVehicles] = useState(false);
  const [vehicleError, setVehicleError] = useState<string | null>(null);
  
  // Current logged-in dealer ID and name
  const [currentDealerId, setCurrentDealerId] = useState<number | null>(null);
  const [currentDealerName, setCurrentDealerName] = useState<string>('');
  
  // Fetch vehicles and dealers on mount
  useEffect(() => {
    const loadProfile = async () => {
      try {
        const token = localStorage.getItem('accessToken');
        if (token) {
          const profile = await getProfile();
          if (profile.dealerId) {
            setCurrentDealerId(profile.dealerId);
            setCurrentDealerName(profile.agencyName || 'ƒê·∫°i l√Ω');
            console.log('‚úÖ Dealer logged in - ID:', profile.dealerId);
            console.log('‚úÖ Dealer name:', profile.agencyName);
          }
        }
      } catch (error) {
        console.log('‚ùå Not logged in or not a dealer');
      }
    };
    
    const loadVehicles = async () => {
      setLoadingVehicles(true);
      setVehicleError(null);
      try {
        const result = await fetchVehiclesFromApi({ status: 'AVAILABLE' });
        setVehicles(result.vehicles);
      } catch (error) {
        console.error('Error loading vehicles:', error);
        setVehicleError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch xe. Vui l√≤ng th·ª≠ l·∫°i.');
      } finally {
        setLoadingVehicles(false);
      }
    };
    
    loadProfile();
    loadVehicles();
  }, []);
  
  const [selectedHour, setSelectedHour] = useState<number>(9);
  const [selectedMinute, setSelectedMinute] = useState<number>(0);

  const [formData, setFormData] = useState<BookingFormData>({
    name: "",
    phone: "",
    email: "",
    citizenId: "",
    model: "",
    variant: "",
    date: "",
    time: "",
    note: "",
    confirmInfo: false
  });

  const [errors, setErrors] = useState<ValidationErrors>({});

  // Pre-fill from navigation state if available
  useEffect(() => {
    if (location.state && location.state.product) {
      const product = location.state.product;
      setFormData(prev => ({
        ...prev,
        model: product.id,
        variant: product.name
      }));
    }
  }, [location.state]);

  // Sync hour/minute with formData.time
  useEffect(() => {
    const timeString = `${selectedHour.toString().padStart(2, '0')}:${selectedMinute.toString().padStart(2, '0')}`;
    setFormData(prev => ({
      ...prev,
      time: timeString
    }));
  }, [selectedHour, selectedMinute]);

  const handleHourChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedHour(Number(e.target.value));
  };

  const handleMinuteChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedMinute(Number(e.target.value));
  };

  const validators = useMemo(() => ({
    name: (value: string): string => {
      if (!value) return "H·ªç t√™n l√† b·∫Øt bu·ªôc";
      if (value.length < 2) return "H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±";
      if (!/^[a-zA-Z√Ä√Å√Ç√É√à√â√ä√å√ç√í√ì√î√ï√ô√öƒÇƒêƒ®≈®∆†√†√°√¢√£√®√©√™√¨√≠√≤√≥√¥√µ√π√∫ƒÉƒëƒ©≈©∆°∆ØƒÇ·∫†·∫¢·∫§·∫¶·∫®·∫™·∫¨·∫Æ·∫∞·∫≤·∫¥·∫∂·∫∏·∫∫·∫º·ªÄ·ªÄ·ªÇ·∫æ∆∞ƒÉ·∫°·∫£·∫•·∫ß·∫©·∫´·∫≠·∫Ø·∫±·∫≥·∫µ·∫∑·∫π·∫ª·∫Ω·ªÅ·ªÅ·ªÉ·∫ø·ªÑ·ªÜ·ªà·ªä·ªå·ªé·ªê·ªí·ªî·ªñ·ªò·ªö·ªú·ªû·ª†·ª¢·ª§·ª¶·ª®·ª™·ªÖ·ªá·ªâ·ªã·ªç·ªè·ªë·ªì·ªï·ªó·ªô·ªõ·ªù·ªü·ª°·ª£·ª•·ªß·ª©·ª´·ª¨·ªÆ·ª∞·ª≤·ª¥√ù·ª∂·ª∏·ª≠·ªØ·ª±·ª≥·ªµ√Ω·ª∑·ªπ\s]+$/.test(value)) {
        return "H·ªç t√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng";
      }
      return "";
    },
    phone: (value: string): string => {
      if (!value) return "S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc";
      const cleanPhone = value.replace(/[\s\-]/g, '');
      if (!/^(\+84|0)(3[2-9]|5[689]|7[06-9]|8[1-689]|9[0-46-9])[0-9]{7}$/.test(cleanPhone)) {
        return "S·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam kh√¥ng h·ª£p l·ªá (VD: 0901234567)";
      }
      return "";
    },
    email: (value: string): string => {
      if (value && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
        return "Email kh√¥ng h·ª£p l·ªá";
      }
      return "";
    },
    citizenId: (value: string): string => {
      if (!value) return "CƒÉn C∆∞·ªõc C√¥ng D√¢n l√† b·∫Øt bu·ªôc";
      const cleanId = value.replace(/[\s\-\.]/g, '');
      if (!/^[0-9]{9}$|^[0-9]{12}$/.test(cleanId)) {
        return "CƒÉn C∆∞·ªõc C√¥ng D√¢n ph·∫£i c√≥ 9 ho·∫∑c 12 s·ªë";
      }
      return "";
    },
    model: (value: string): string => !value ? "Vui l√≤ng ch·ªçn m·∫´u xe" : "",
    variant: (value: string): string => !value ? "Vui l√≤ng ch·ªçn m√†u s·∫Øc" : "",
    date: (value: string): string => {
      if (!value) return "Ng√†y h·∫πn l√† b·∫Øt bu·ªôc";
      const selectedDate = new Date(value);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      if (selectedDate < today) return "Ng√†y h·∫πn kh√¥ng th·ªÉ l√† ng√†y trong qu√° kh·ª©";
      
      const dayOfWeek = selectedDate.getDay();
      if (dayOfWeek === 0) return "Ch√∫ng t√¥i ch·ªâ l√†m vi·ªác t·ª´ Th·ª© 2 ƒë·∫øn Th·ª© 7";
      
      return "";
    },
    time: (value: string, dateValue?: string): string => {
      if (!value) return "Gi·ªù h·∫πn l√† b·∫Øt bu·ªôc";
      
      if (!dateValue) return "Vui l√≤ng ch·ªçn ng√†y tr∆∞·ªõc";
      
      const selectedDate = new Date(dateValue);
      const dayOfWeek = selectedDate.getDay();
      if (dayOfWeek === 0) return "Ch√∫ng t√¥i ch·ªâ l√†m vi·ªác t·ª´ Th·ª© 2 ƒë·∫øn Th·ª© 7";
      
      const [hours, minutes] = value.split(':').map(Number);
      if (hours < 8 || hours > 17 || (hours === 17 && minutes > 0)) {
        return "Gi·ªù l√†m vi·ªác: 08:00 - 17:00 (Th·ª© 2 - Th·ª© 7)";
      }
      return "";
    },
    confirmInfo: (value: boolean): string => !value ? "Vui l√≤ng x√°c nh·∫≠n th√¥ng tin" : ""
  }), []);

  const validate = useCallback((field?: string): boolean => {
    const newErrors: ValidationErrors = {};
    const fieldsToValidate = field ? [field] : Object.keys(formData) as Array<keyof BookingFormData>;

    fieldsToValidate.forEach((key) => {
      if (key === 'time') {
        const error = validators.time(formData.time, formData.date);
        if (error) newErrors.time = error;
      } else if (key === 'confirmInfo') {
        const error = validators.confirmInfo(formData.confirmInfo);
        if (error) newErrors.confirmInfo = error;
      } else if (key in validators) {
        const validator = validators[key as keyof typeof validators] as (value: string) => string;
        const error = validator(formData[key as keyof BookingFormData] as string);
        if (error) newErrors[key as keyof ValidationErrors] = error;
      }
    });

    if (field) {
      setErrors(prev => ({ ...prev, ...newErrors }));
    } else {
      setErrors(newErrors);
    }

    return Object.keys(newErrors).length === 0;
  }, [formData, validators]);

  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    const checked = (e.target as HTMLInputElement).checked;

    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));

    setErrors(prev => ({ ...prev, [name]: undefined }));
  }, []);

  const handleBlur = useCallback((e: React.FocusEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    validate(e.target.name);
  }, [validate]);

  const modelVariants = useMemo(() => {
    if (!formData.model) return [];
    const selectedVehicle = vehicles.find(v => v.vehicleId.toString() === formData.model);
    if (!selectedVehicle) return [];
    return [{ color: selectedVehicle.color, version: selectedVehicle.version }];
  }, [formData.model, vehicles]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Check if dealer is logged in
    if (!currentDealerId) {
      setSubmitError('‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n ƒë·∫°i l√Ω ƒë·ªÉ ƒëƒÉng k√Ω l√°i th·ª≠!');
      return;
    }
    
    if (!validate()) {
      console.log('Validation failed:', errors);
      return;
    }

    setIsSubmitting(true);
    setSubmitError(null);

    try {
      // B∆∞·ªõc 1: T·∫°o customer tr∆∞·ªõc (backend validate customerId)
      console.log('üìù Step 1: Creating customer for validation...');
      const customerPayload = {
        fullName: formData.name,
        dob: '2000-01-01',
        gender: 'Kh√°c' as const,
        email: formData.email || `testdrive${Date.now()}@edrive.temp`,
        phone: formData.phone,
        address: 'ƒêƒÉng k√Ω l√°i th·ª≠ - Xem chi ti·∫øt trong Test Drive Management',
        idCardNo: formData.citizenId
      };
      
      const createdCustomer = await createCustomer(customerPayload);
      console.log('‚úÖ Customer created with ID:', createdCustomer.customerId);
      
      // B∆∞·ªõc 2: T·∫°o test drive v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß trong note
      console.log('üìù Step 2: Creating test drive...');
      const scheduleDatetime = `${formData.date}T${formData.time}:00`;
      
      // L∆∞u ƒê·∫¶Y ƒê·ª¶ th√¥ng tin kh√°ch h√†ng v√†o note (ƒë√¢y l√† ngu·ªìn th√¥ng tin ch√≠nh)
      const customerNote = `
=== TH√îNG TIN KH√ÅCH H√ÄNG ===
M√£ KH: ${createdCustomer.customerId}
H·ªç t√™n: ${formData.name}
S·ªë ƒëi·ªán tho·∫°i: ${formData.phone}
Email: ${formData.email || 'Kh√¥ng cung c·∫•p'}
CCCD: ${formData.citizenId}
${formData.note ? `\nGhi ch√∫ th√™m: ${formData.note}` : ''}
      `.trim();
      
      const testDrivePayload = {
        customerId: createdCustomer.customerId, // Customer ID th·∫≠t t·ª´ DB
        dealerId: currentDealerId,
        vehicleId: parseInt(formData.model),
        scheduleDatetime,
        status: 'PENDING' as const,
        note: customerNote
      };
      
      console.log('üè¢ Using dealer ID from profile:', currentDealerId);
      console.log('üì§ Test drive payload:', testDrivePayload);
      const createdTestDrive = await createTestDrive(testDrivePayload);
      console.log('‚úÖ Test drive created successfully!');
      console.log('‚úÖ Test drive response:', createdTestDrive);

      setIsSuccessModalOpen(true);
      
      // Reset form
      setFormData({
        name: "",
        phone: "",
        email: "",
        citizenId: "",
        model: "",
        variant: "",
        date: "",
        time: "",
        note: "",
        confirmInfo: false
      });
      setErrors({});
      
    } catch (error) {
      console.error('‚ùå Error during test drive booking:', error);
      
      if (error instanceof TestDriveApiError) {
        setSubmitError(`L·ªói ƒëƒÉng k√Ω l√°i th·ª≠: ${error.message}`);
      } else {
        setSubmitError('ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng ki·ªÉm tra th√¥ng tin v√† th·ª≠ l·∫°i.');
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCloseSuccess = () => {
    setIsSuccessModalOpen(false);
    navigate('/');
  };

  const getTodayDate = () => {
    const today = new Date();
    return today.toISOString().split('T')[0];
  };

  return (
    <>
      <div className={styles.wrap}>
        <div className={styles.container}>
          {/* Hero Section */}
          <div className={styles.hero}>
            <div className={styles.heroContent}>
              <div className={styles.badge}>
                <i className="fas fa-car"></i>
                <span>Tr·∫£i nghi·ªám l√°i th·ª≠ mi·ªÖn ph√≠</span>
              </div>
              <h1 className={styles.heroTitle}>
                ƒêƒÉng k√Ω <span className={styles.highlight}>L√°i th·ª≠</span> E-Drive
              </h1>
              <p className={styles.heroSubtitle}>
                Tr·∫£i nghi·ªám c·∫£m gi√°c l√°i xe ƒëi·ªán th·∫ø h·ªá m·ªõi. ƒê·∫∑t l·ªãch ngay h√¥m nay v√† kh√°m ph√° s·ª©c m·∫°nh c·ªßa c√¥ng ngh·ªá xanh!
              </p>
              
              <div className={styles.features}>
                <div className={styles.feature}>
                  <div className={styles.featureIcon}>
                    <i className="fas fa-clock"></i>
                  </div>
                  <div className={styles.featureContent}>
                    <h3>Th·ªùi gian linh ho·∫°t</h3>
                    <p>Ch·ªçn l·ªãch ph√π h·ª£p</p>
                  </div>
                </div>
                <div className={styles.feature}>
                  <div className={styles.featureIcon}>
                    <i className="fas fa-user-tie"></i>
                  </div>
                  <div className={styles.featureContent}>
                    <h3>H·ªó tr·ª£ chuy√™n nghi·ªáp</h3>
                    <p>T∆∞ v·∫•n nhi·ªát t√¨nh</p>
                  </div>
                </div>
                <div className={styles.feature}>
                  <div className={styles.featureIcon}>
                    <i className="fas fa-shield-alt"></i>
                  </div>
                  <div className={styles.featureContent}>
                    <h3>An to√†n tuy·ªát ƒë·ªëi</h3>
                    <p>B·∫£o hi·ªÉm to√†n di·ªán</p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Form Section */}
          <div className={styles.formSection}>
            <div className={styles.formHeader}>
              <h2>Th√¥ng tin ƒë·∫∑t l·ªãch</h2>
              <p>Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ ch√∫ng t√¥i ph·ª•c v·ª• b·∫°n t·ªët nh·∫•t</p>
              {!currentDealerId && (
                <div style={{
                  background: '#fff3cd',
                  border: '1px solid #ffc107',
                  borderRadius: '8px',
                  padding: '12px 16px',
                  marginTop: '16px',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '12px',
                  color: '#856404'
                }}>
                  <i className="fas fa-exclamation-triangle" style={{ fontSize: '20px' }}></i>
                  <span>‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n ƒë·∫°i l√Ω ƒë·ªÉ c√≥ th·ªÉ ƒëƒÉng k√Ω l√°i th·ª≠!</span>
                </div>
              )}
            </div>

            <form onSubmit={handleSubmit} className={styles.form}>
              {submitError && (
                <div className={styles.errorBanner}>
                  <i className="fas fa-exclamation-circle"></i>
                  <span>{submitError}</span>
                </div>
              )}

              {/* Personal Information */}
              <div className={styles.formGroup}>
                <h3 className={styles.sectionTitle}>
                  <i className="fas fa-user"></i>
                  Th√¥ng tin c√° nh√¢n
                </h3>
                
                <div className={styles.formRow}>
                  <div className={styles.formField}>
                    <label htmlFor="name">
                      H·ªç v√† t√™n <span className={styles.required}>*</span>
                    </label>
                    <div className={styles.inputWrapper}>
                      <i className={`fas fa-user ${styles.inputIcon}`}></i>
                      <input
                        type="text"
                        id="name"
                        name="name"
                        value={formData.name}
                        onChange={handleChange}
                        onBlur={handleBlur}
                        className={errors.name ? styles.error : ''}
                        placeholder="Nguy·ªÖn VƒÉn A"
                        style={{ paddingLeft: '2.75rem' }}
                      />
                    </div>
                    {errors.name && <span className={styles.errorText}>{errors.name}</span>}
                  </div>

                  <div className={styles.formField}>
                    <label htmlFor="phone">
                      S·ªë ƒëi·ªán tho·∫°i <span className={styles.required}>*</span>
                    </label>
                    <div className={styles.inputWrapper}>
                      <i className={`fas fa-phone ${styles.inputIcon}`}></i>
                      <input
                        type="tel"
                        id="phone"
                        name="phone"
                        value={formData.phone}
                        onChange={handleChange}
                        onBlur={handleBlur}
                        className={errors.phone ? styles.error : ''}
                        placeholder="0901234567"
                        style={{ paddingLeft: '2.75rem' }}
                      />
                    </div>
                    {errors.phone && <span className={styles.errorText}>{errors.phone}</span>}
                  </div>
                </div>

                <div className={styles.formRow}>
                  <div className={styles.formField}>
                    <label htmlFor="email">Email</label>
                    <div className={styles.inputWrapper}>
                      <i className={`fas fa-envelope ${styles.inputIcon}`}></i>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        value={formData.email}
                        onChange={handleChange}
                        onBlur={handleBlur}
                        className={errors.email ? styles.error : ''}
                        placeholder="email@example.com"
                        style={{ paddingLeft: '2.75rem' }}
                      />
                    </div>
                    {errors.email && <span className={styles.errorText}>{errors.email}</span>}
                  </div>

                  <div className={styles.formField}>
                    <label htmlFor="citizenId">
                      CƒÉn c∆∞·ªõc c√¥ng d√¢n <span className={styles.required}>*</span>
                    </label>
                    <div className={styles.inputWrapper}>
                      <i className={`fas fa-id-card ${styles.inputIcon}`}></i>
                      <input
                        type="text"
                        id="citizenId"
                        name="citizenId"
                        value={formData.citizenId}
                        onChange={handleChange}
                        onBlur={handleBlur}
                        className={errors.citizenId ? styles.error : ''}
                        placeholder="001234567890"
                        style={{ paddingLeft: '2.75rem' }}
                      />
                    </div>
                    {errors.citizenId && <span className={styles.errorText}>{errors.citizenId}</span>}
                  </div>
                </div>
              </div>

              {/* Vehicle Selection */}
              <div className={styles.formGroup}>
                <h3 className={styles.sectionTitle}>
                  <i className="fas fa-car"></i>
                  Ch·ªçn xe
                </h3>

                {vehicleError && (
                  <div className={styles.warningBanner}>
                    <i className="fas fa-exclamation-triangle"></i>
                    <span>{vehicleError}</span>
                  </div>
                )}

                <div className={styles.formRow}>
                  <div className={styles.formField}>
                    <label htmlFor="model">
                      M·∫´u xe <span className={styles.required}>*</span>
                    </label>
                    <select
                      id="model"
                      name="model"
                      value={formData.model}
                      onChange={handleChange}
                      onBlur={handleBlur}
                      className={errors.model ? styles.error : ''}
                      disabled={loadingVehicles}
                    >
                      <option value="">
                        {loadingVehicles ? 'ƒêang t·∫£i...' : 'Ch·ªçn m·∫´u xe'}
                      </option>
                      {vehicles.map((vehicle) => (
                        <option key={vehicle.vehicleId} value={vehicle.vehicleId}>
                          {vehicle.modelName} {vehicle.version}
                        </option>
                      ))}
                    </select>
                    {errors.model && <span className={styles.errorText}>{errors.model}</span>}
                  </div>

                  <div className={styles.formField}>
                    <label htmlFor="variant">
                      M√†u s·∫Øc <span className={styles.required}>*</span>
                    </label>
                    <select
                      id="variant"
                      name="variant"
                      value={formData.variant}
                      onChange={handleChange}
                      onBlur={handleBlur}
                      className={errors.variant ? styles.error : ''}
                      disabled={!formData.model || modelVariants.length === 0}
                    >
                      <option value="">Ch·ªçn m√†u s·∫Øc</option>
                      {modelVariants.map((variant, index) => (
                        <option key={index} value={variant.color}>
                          {variant.color}
                        </option>
                      ))}
                    </select>
                    {errors.variant && <span className={styles.errorText}>{errors.variant}</span>}
                  </div>
                </div>
              </div>

              {/* Appointment Details */}
              <div className={styles.formGroup}>
                <h3 className={styles.sectionTitle}>
                  <i className="fas fa-calendar-alt"></i>
                  Th√¥ng tin l·ªãch h·∫πn
                </h3>

                <div className={styles.formField}>
                  <label htmlFor="dealer">
                    ƒê·∫°i l√Ω <span className={styles.required}>*</span>
                  </label>
                  <div className={styles.inputWrapper}>
                    <i className={`fas fa-store ${styles.inputIcon}`}></i>
                    <input
                      type="text"
                      id="dealer"
                      name="dealer"
                      value={currentDealerName || 'Ch∆∞a ƒëƒÉng nh·∫≠p'}
                      readOnly
                      className={!currentDealerId ? styles.error : ''}
                      placeholder="Vui l√≤ng ƒëƒÉng nh·∫≠p"
                      style={{ 
                        paddingLeft: '2.75rem',
                        backgroundColor: '#f5f5f5',
                        cursor: 'not-allowed'
                      }}
                    />
                  </div>
                  {!currentDealerId && (
                    <span className={styles.errorText}>
                      Vui l√≤ng ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n ƒë·∫°i l√Ω
                    </span>
                  )}
                </div>

                <div className={styles.formRow}>
                  <div className={styles.formField}>
                    <label htmlFor="date">
                      Ng√†y h·∫πn <span className={styles.required}>*</span>
                    </label>
                    <input
                      type="date"
                      id="date"
                      name="date"
                      value={formData.date}
                      onChange={handleChange}
                      onBlur={handleBlur}
                      className={errors.date ? styles.error : ''}
                      min={getTodayDate()}
                    />
                    {errors.date && <span className={styles.errorText}>{errors.date}</span>}
                  </div>

                  <div className={styles.formField}>
                    <label htmlFor="time">
                      Gi·ªù h·∫πn <span className={styles.required}>*</span>
                    </label>
                    <div className={styles.timeSelector}>
                      <select
                        id="hour"
                        value={selectedHour}
                        onChange={handleHourChange}
                        className={styles.timeInput}
                      >
                        {Array.from({ length: 10 }, (_, i) => i + 8).map(hour => (
                          <option key={hour} value={hour}>
                            {hour.toString().padStart(2, '0')}
                          </option>
                        ))}
                      </select>
                      <span className={styles.timeSeparator}>:</span>
                      <select
                        id="minute"
                        value={selectedMinute}
                        onChange={handleMinuteChange}
                        className={styles.timeInput}
                      >
                        {[0, 15, 30, 45].map(minute => (
                          <option key={minute} value={minute}>
                            {minute.toString().padStart(2, '0')}
                          </option>
                        ))}
                      </select>
                    </div>
                    {errors.time && <span className={styles.errorText}>{errors.time}</span>}
                    <p className={styles.helpText}>
                      <i className="fas fa-info-circle"></i>
                      Gi·ªù l√†m vi·ªác: 08:00 - 17:00 (Th·ª© 2 - Th·ª© 7)
                    </p>
                  </div>
                </div>

                <div className={styles.formField}>
                  <label htmlFor="note">Ghi ch√∫</label>
                  <textarea
                    id="note"
                    name="note"
                    value={formData.note}
                    onChange={handleChange}
                    rows={4}
                    placeholder="Th√¥ng tin th√™m v·ªÅ y√™u c·∫ßu c·ªßa b·∫°n..."
                  />
                </div>
              </div>

              {/* Confirmation */}
              <div className={styles.formGroup}>
                <div className={styles.checkbox}>
                  <input
                    type="checkbox"
                    id="confirmInfo"
                    name="confirmInfo"
                    checked={formData.confirmInfo}
                    onChange={handleChange}
                  />
                  <label htmlFor="confirmInfo">
                    T√¥i x√°c nh·∫≠n r·∫±ng t·∫•t c·∫£ th√¥ng tin tr√™n l√† ch√≠nh x√°c v√† ƒë·ªìng √Ω v·ªõi{' '}
                    <a href="/terms" target="_blank" rel="noopener noreferrer">
                      ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng
                    </a>
                  </label>
                </div>
                {errors.confirmInfo && <span className={styles.errorText}>{errors.confirmInfo}</span>}
              </div>

              {/* Submit Buttons */}
              <div className={styles.formActions}>
                <button
                  type="button"
                  className={styles.secondaryButton}
                  onClick={() => navigate(-1)}
                  disabled={isSubmitting}
                >
                  <i className="fas fa-arrow-left"></i>
                  Quay l·∫°i
                </button>
                <button
                  type="submit"
                  className={styles.primaryButton}
                  disabled={isSubmitting || loadingVehicles}
                >
                  {isSubmitting ? (
                    <>
                      <i className="fas fa-spinner fa-spin"></i>
                      ƒêang x·ª≠ l√Ω...
                    </>
                  ) : (
                    <>
                      <i className="fas fa-paper-plane"></i>
                      ƒê·∫∑t l·ªãch ngay
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      {/* Success Modal */}
      <SuccessModal
        isOpen={isSuccessModalOpen}
        onClose={handleCloseSuccess}
        type="success"
        title="ƒê·∫∑t l·ªãch l√°i th·ª≠ th√†nh c√¥ng!"
        message="C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω l√°i th·ª≠ xe ƒëi·ªán E-Drive. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n ƒë·ªÉ x√°c nh·∫≠n l·ªãch h·∫πn trong th·ªùi gian s·ªõm nh·∫•t!"
      />
      
      <Footer />
    </>
  );
};

export default TestDrivePage;
